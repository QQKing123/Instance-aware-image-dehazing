import os,argparse
import torch,warnings
warnings.filterwarnings('ignore')
parser=argparse.ArgumentParser()
# full-image & instance
parser.add_argument('--steps',type=int,default=50000)
parser.add_argument('--device',type=str,default='cuda')
parser.add_argument('--resume',type=bool,default=True)
parser.add_argument('--eval_step',type=int,default=5000)
parser.add_argument('--lr', default=0.0001, type=float, help='learning rate')
parser.add_argument('--model_dir',type=str,default='./trained_models/')
parser.add_argument('--trainset',type=str,default='ots_train')
parser.add_argument('--testset',type=str,default='ots_test')
parser.add_argument('--net',type=str,default='hra')
parser.add_argument('--blocks',type=int,default=4,help='residual_blocks')
parser.add_argument('--bs',type=int,default=1,help='batch size')
parser.add_argument('--crop',action='store_true')
parser.add_argument('--crop_size',type=int,default=240,help='Takes effect when using --crop ')
parser.add_argument('--no_lr_sche',action='store_true',help='no lr cos schedule')
parser.add_argument('--fusion', action='store_true')
# fusion
parser.add_argument('--stage', type=str, default='full', help='only full, instance or fusion'))
parser.add_argument('--train_img_dir', type=str, default='../data/RESIDE/OTS', help='training images folder')
parser.add_argument('--test_img_dir', type=str, default='../data/RESIDE/SOTS', help='test  images folder')
parser.add_argument('--image_format_train', type=str, default='.jpg', help='images format')
parser.add_argument('--image_format_test', type=str, default='.png', help='images format')
parser.add_argument('--model', type=str, default='train', help='only train_model need to be used'))
parser.add_argument('--beta1', type=float, default=0.9, help='momentum term of adam')
parser.add_argument('--beta2', type=float, default=0.999, help='momentum term of adam')
parser.add_argument('--batch_size', type=int, default=2, help='input batch size')
parser.add_argument('--loadSize', type=int, default=240, help='scale images to this size')
parser.add_argument('--norm', type=str, default='batch', help='instance normalization or batch normalization')
opt=parser.parse_args()
